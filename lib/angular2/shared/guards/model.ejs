/* tslint:disable */
import { Observable, of } from 'rxjs';
import { take, map, switchMap, catchError } from 'rxjs/operators'
import { Injectable } from '@angular/core';
import { Store } from '@ngrx/store';
import { CanActivate, ActivatedRouteSnapshot } from '@angular/router';

import { <%- modelName %>Api } from '../services/index';
import { get<%- modelName %>ById,get<%- modelName %>sIsProcessingSuccess,get<%- modelName %>sIsProcessingResponse  } from '../reducers/<%- modelName %>';
import { <%- modelName %>Actions } from '../actions/<%- modelName %>';

@Injectable()
export class <%- modelName %>ExistsGuard implements CanActivate {
  constructor(
    private store: Store<any>,
    private <%- modelName %>: <%- modelName %>Api
  ) {}

  public canActivate(route: ActivatedRouteSnapshot): Observable<boolean> {
    <% if(entityId!==null){ %>
    return new Observable(obs => {
      this.hasEntity(
        route.params['<%- modelName %>Id'] || route.params['id']
      ).subscribe(val => {
        if (val) {
          obs.next(true);
        } else {
          this.store.dispatch(new new <%- modelName %>Actions.guardFail());
          obs.next(false);
        }
        obs.complete();
      });
    });
    <% } else {%>
    return this.hasEntity(route.params['<%- modelName %>Id'] || route.params['id']);
    <% }%>
  }

  protected hasEntityInStore(id: string): Observable<boolean> {
    return this.store.select(get<%- modelName %>ById(id)).pipe(
      map((entitie) => !!entitie),
      take(1)
    );
  }
  <% if(entityId!==null){ %>
  protected hasEntityInApi(id: string): Observable<boolean> {
    this.store.dispatch(new <%- modelName %>Actions.find({ where: { <%- entityId %>: id } }));
    return new Observable(obs => {
      this.store.select(get<%- modelName %>sIsProcessingSuccess()).subscribe(val => {
        if (val) {
          this.store
            .select(get<%- modelName %>sIsProcessingResponse())
            .subscribe(res => {
              if (res.length > 0) {
                obs.next(true);
              } else {
                obs.next(false);
              }
              obs.complete();
            });
        }
      });
    });
  }
  <% } else {%>
  protected hasEntityInApi(id: string): Observable<boolean> {
    return this.<%- modelName %>.exists(id).pipe(
      map((response: any) => !!response.exists),
      catchError(() => {
        this.store.dispatch(new <%- modelName %>Actions.guardFail());
        return of(false);
      })
    );
  }
  <% }%>
  

  protected hasEntity(id: string): Observable<boolean> {
    return this.hasEntityInStore(id).pipe(
      switchMap((inStore) => {
        if (inStore) {
          return of(inStore);
        }

        return this.hasEntityInApi(id);
      })
    );
  }
}
